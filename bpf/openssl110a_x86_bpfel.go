// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64

package bpf

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type Openssl110aConnEvtT struct {
	ConnInfo Openssl110aConnInfoT
	ConnType Openssl110aConnTypeT
	_        [4]byte
	Ts       uint64
}

type Openssl110aConnIdS_t struct {
	TgidFd  uint64
	NoTrace bool
	_       [7]byte
}

type Openssl110aConnInfoT struct {
	ConnId struct {
		Upid struct {
			Pid            uint32
			_              [4]byte
			StartTimeTicks uint64
		}
		Fd   int32
		_    [4]byte
		Tsid uint64
	}
	ReadBytes     uint64
	WriteBytes    uint64
	SslReadBytes  uint64
	SslWriteBytes uint64
	Laddr         struct {
		In6 struct {
			Sin6Family   uint16
			Sin6Port     uint16
			Sin6Flowinfo uint32
			Sin6Addr     struct{ In6U struct{ U6Addr8 [16]uint8 } }
			Sin6ScopeId  uint32
		}
	}
	Raddr struct {
		In6 struct {
			Sin6Family   uint16
			Sin6Port     uint16
			Sin6Flowinfo uint32
			Sin6Addr     struct{ In6U struct{ U6Addr8 [16]uint8 } }
			Sin6ScopeId  uint32
		}
	}
	Protocol            Openssl110aTrafficProtocolT
	Role                Openssl110aEndpointRoleT
	PrevCount           uint64
	PrevBuf             [4]int8
	PrependLengthHeader bool
	NoTrace             bool
	Ssl                 bool
	_                   [1]byte
}

type Openssl110aConnTypeT uint32

const (
	Openssl110aConnTypeTKConnect       Openssl110aConnTypeT = 0
	Openssl110aConnTypeTKClose         Openssl110aConnTypeT = 1
	Openssl110aConnTypeTKProtocolInfer Openssl110aConnTypeT = 2
)

type Openssl110aControlValueIndexT uint32

const (
	Openssl110aControlValueIndexTKTargetTGIDIndex          Openssl110aControlValueIndexT = 0
	Openssl110aControlValueIndexTKStirlingTGIDIndex        Openssl110aControlValueIndexT = 1
	Openssl110aControlValueIndexTKEnabledXdpIndex          Openssl110aControlValueIndexT = 2
	Openssl110aControlValueIndexTKEnableFilterByPid        Openssl110aControlValueIndexT = 3
	Openssl110aControlValueIndexTKEnableFilterByLocalPort  Openssl110aControlValueIndexT = 4
	Openssl110aControlValueIndexTKEnableFilterByRemotePort Openssl110aControlValueIndexT = 5
	Openssl110aControlValueIndexTKEnableFilterByRemoteHost Openssl110aControlValueIndexT = 6
	Openssl110aControlValueIndexTKNumControlValues         Openssl110aControlValueIndexT = 7
)

type Openssl110aEndpointRoleT uint32

const (
	Openssl110aEndpointRoleTKRoleClient  Openssl110aEndpointRoleT = 1
	Openssl110aEndpointRoleTKRoleServer  Openssl110aEndpointRoleT = 2
	Openssl110aEndpointRoleTKRoleUnknown Openssl110aEndpointRoleT = 4
)

type Openssl110aKernEvt struct {
	FuncName [16]int8
	Ts       uint64
	Seq      uint64
	Len      uint32
	Flags    uint8
	_        [3]byte
	ConnIdS  Openssl110aConnIdS_t
	IsSample int32
	Step     Openssl110aStepT
}

type Openssl110aKernEvtData struct {
	Ke      Openssl110aKernEvt
	BufSize uint32
	Msg     [30720]int8
	_       [4]byte
}

type Openssl110aSockKey struct {
	Sip   [2]uint64
	Dip   [2]uint64
	Sport uint16
	Dport uint16
	_     [4]byte
}

type Openssl110aStepT uint32

const (
	Openssl110aStepTStart       Openssl110aStepT = 0
	Openssl110aStepTSSL_OUT     Openssl110aStepT = 1
	Openssl110aStepTSYSCALL_OUT Openssl110aStepT = 2
	Openssl110aStepTTCP_OUT     Openssl110aStepT = 3
	Openssl110aStepTIP_OUT      Openssl110aStepT = 4
	Openssl110aStepTQDISC_OUT   Openssl110aStepT = 5
	Openssl110aStepTDEV_OUT     Openssl110aStepT = 6
	Openssl110aStepTNIC_OUT     Openssl110aStepT = 7
	Openssl110aStepTNIC_IN      Openssl110aStepT = 8
	Openssl110aStepTDEV_IN      Openssl110aStepT = 9
	Openssl110aStepTIP_IN       Openssl110aStepT = 10
	Openssl110aStepTTCP_IN      Openssl110aStepT = 11
	Openssl110aStepTUSER_COPY   Openssl110aStepT = 12
	Openssl110aStepTSYSCALL_IN  Openssl110aStepT = 13
	Openssl110aStepTSSL_IN      Openssl110aStepT = 14
	Openssl110aStepTEnd         Openssl110aStepT = 15
)

type Openssl110aTrafficDirectionT uint32

const (
	Openssl110aTrafficDirectionTKEgress  Openssl110aTrafficDirectionT = 0
	Openssl110aTrafficDirectionTKIngress Openssl110aTrafficDirectionT = 1
)

type Openssl110aTrafficProtocolT uint32

const (
	Openssl110aTrafficProtocolTKProtocolUnset   Openssl110aTrafficProtocolT = 0
	Openssl110aTrafficProtocolTKProtocolUnknown Openssl110aTrafficProtocolT = 1
	Openssl110aTrafficProtocolTKProtocolHTTP    Openssl110aTrafficProtocolT = 2
	Openssl110aTrafficProtocolTKProtocolHTTP2   Openssl110aTrafficProtocolT = 3
	Openssl110aTrafficProtocolTKProtocolMySQL   Openssl110aTrafficProtocolT = 4
	Openssl110aTrafficProtocolTKProtocolCQL     Openssl110aTrafficProtocolT = 5
	Openssl110aTrafficProtocolTKProtocolPGSQL   Openssl110aTrafficProtocolT = 6
	Openssl110aTrafficProtocolTKProtocolDNS     Openssl110aTrafficProtocolT = 7
	Openssl110aTrafficProtocolTKProtocolRedis   Openssl110aTrafficProtocolT = 8
	Openssl110aTrafficProtocolTKProtocolNATS    Openssl110aTrafficProtocolT = 9
	Openssl110aTrafficProtocolTKProtocolMongo   Openssl110aTrafficProtocolT = 10
	Openssl110aTrafficProtocolTKProtocolKafka   Openssl110aTrafficProtocolT = 11
	Openssl110aTrafficProtocolTKProtocolMux     Openssl110aTrafficProtocolT = 12
	Openssl110aTrafficProtocolTKProtocolAMQP    Openssl110aTrafficProtocolT = 13
	Openssl110aTrafficProtocolTKNumProtocols    Openssl110aTrafficProtocolT = 14
)

// LoadOpenssl110a returns the embedded CollectionSpec for Openssl110a.
func LoadOpenssl110a() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_Openssl110aBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load Openssl110a: %w", err)
	}

	return spec, err
}

// LoadOpenssl110aObjects loads Openssl110a and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*Openssl110aObjects
//	*Openssl110aPrograms
//	*Openssl110aMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func LoadOpenssl110aObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := LoadOpenssl110a()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// Openssl110aSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type Openssl110aSpecs struct {
	Openssl110aProgramSpecs
	Openssl110aMapSpecs
}

// Openssl110aSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type Openssl110aProgramSpecs struct {
	SSL_readEntryNestedSyscall    *ebpf.ProgramSpec `ebpf:"SSL_read_entry_nested_syscall"`
	SSL_readEntryOffset           *ebpf.ProgramSpec `ebpf:"SSL_read_entry_offset"`
	SSL_readExEntryNestedSyscall  *ebpf.ProgramSpec `ebpf:"SSL_read_ex_entry_nested_syscall"`
	SSL_readExRetNestedSyscall    *ebpf.ProgramSpec `ebpf:"SSL_read_ex_ret_nested_syscall"`
	SSL_readRetNestedSyscall      *ebpf.ProgramSpec `ebpf:"SSL_read_ret_nested_syscall"`
	SSL_readRetOffset             *ebpf.ProgramSpec `ebpf:"SSL_read_ret_offset"`
	SSL_writeEntryNestedSyscall   *ebpf.ProgramSpec `ebpf:"SSL_write_entry_nested_syscall"`
	SSL_writeEntryOffset          *ebpf.ProgramSpec `ebpf:"SSL_write_entry_offset"`
	SSL_writeExEntryNestedSyscall *ebpf.ProgramSpec `ebpf:"SSL_write_ex_entry_nested_syscall"`
	SSL_writeExRetNestedSyscall   *ebpf.ProgramSpec `ebpf:"SSL_write_ex_ret_nested_syscall"`
	SSL_writeRetNestedSyscall     *ebpf.ProgramSpec `ebpf:"SSL_write_ret_nested_syscall"`
	SSL_writeRetOffset            *ebpf.ProgramSpec `ebpf:"SSL_write_ret_offset"`
}

// Openssl110aMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type Openssl110aMapSpecs struct {
	ActiveSslReadArgsMap  *ebpf.MapSpec `ebpf:"active_ssl_read_args_map"`
	ActiveSslWriteArgsMap *ebpf.MapSpec `ebpf:"active_ssl_write_args_map"`
	ConnEvtRb             *ebpf.MapSpec `ebpf:"conn_evt_rb"`
	ConnInfoMap           *ebpf.MapSpec `ebpf:"conn_info_map"`
	FilterMntnsMap        *ebpf.MapSpec `ebpf:"filter_mntns_map"`
	FilterNetnsMap        *ebpf.MapSpec `ebpf:"filter_netns_map"`
	FilterPidMap          *ebpf.MapSpec `ebpf:"filter_pid_map"`
	FilterPidnsMap        *ebpf.MapSpec `ebpf:"filter_pidns_map"`
	Rb                    *ebpf.MapSpec `ebpf:"rb"`
	SslDataMap            *ebpf.MapSpec `ebpf:"ssl_data_map"`
	SslRb                 *ebpf.MapSpec `ebpf:"ssl_rb"`
	SslUserSpaceCallMap   *ebpf.MapSpec `ebpf:"ssl_user_space_call_map"`
	SyscallDataMap        *ebpf.MapSpec `ebpf:"syscall_data_map"`
	SyscallRb             *ebpf.MapSpec `ebpf:"syscall_rb"`
}

// Openssl110aObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to LoadOpenssl110aObjects or ebpf.CollectionSpec.LoadAndAssign.
type Openssl110aObjects struct {
	Openssl110aPrograms
	Openssl110aMaps
}

func (o *Openssl110aObjects) Close() error {
	return _Openssl110aClose(
		&o.Openssl110aPrograms,
		&o.Openssl110aMaps,
	)
}

// Openssl110aMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to LoadOpenssl110aObjects or ebpf.CollectionSpec.LoadAndAssign.
type Openssl110aMaps struct {
	ActiveSslReadArgsMap  *ebpf.Map `ebpf:"active_ssl_read_args_map"`
	ActiveSslWriteArgsMap *ebpf.Map `ebpf:"active_ssl_write_args_map"`
	ConnEvtRb             *ebpf.Map `ebpf:"conn_evt_rb"`
	ConnInfoMap           *ebpf.Map `ebpf:"conn_info_map"`
	FilterMntnsMap        *ebpf.Map `ebpf:"filter_mntns_map"`
	FilterNetnsMap        *ebpf.Map `ebpf:"filter_netns_map"`
	FilterPidMap          *ebpf.Map `ebpf:"filter_pid_map"`
	FilterPidnsMap        *ebpf.Map `ebpf:"filter_pidns_map"`
	Rb                    *ebpf.Map `ebpf:"rb"`
	SslDataMap            *ebpf.Map `ebpf:"ssl_data_map"`
	SslRb                 *ebpf.Map `ebpf:"ssl_rb"`
	SslUserSpaceCallMap   *ebpf.Map `ebpf:"ssl_user_space_call_map"`
	SyscallDataMap        *ebpf.Map `ebpf:"syscall_data_map"`
	SyscallRb             *ebpf.Map `ebpf:"syscall_rb"`
}

func (m *Openssl110aMaps) Close() error {
	return _Openssl110aClose(
		m.ActiveSslReadArgsMap,
		m.ActiveSslWriteArgsMap,
		m.ConnEvtRb,
		m.ConnInfoMap,
		m.FilterMntnsMap,
		m.FilterNetnsMap,
		m.FilterPidMap,
		m.FilterPidnsMap,
		m.Rb,
		m.SslDataMap,
		m.SslRb,
		m.SslUserSpaceCallMap,
		m.SyscallDataMap,
		m.SyscallRb,
	)
}

// Openssl110aPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to LoadOpenssl110aObjects or ebpf.CollectionSpec.LoadAndAssign.
type Openssl110aPrograms struct {
	SSL_readEntryNestedSyscall    *ebpf.Program `ebpf:"SSL_read_entry_nested_syscall"`
	SSL_readEntryOffset           *ebpf.Program `ebpf:"SSL_read_entry_offset"`
	SSL_readExEntryNestedSyscall  *ebpf.Program `ebpf:"SSL_read_ex_entry_nested_syscall"`
	SSL_readExRetNestedSyscall    *ebpf.Program `ebpf:"SSL_read_ex_ret_nested_syscall"`
	SSL_readRetNestedSyscall      *ebpf.Program `ebpf:"SSL_read_ret_nested_syscall"`
	SSL_readRetOffset             *ebpf.Program `ebpf:"SSL_read_ret_offset"`
	SSL_writeEntryNestedSyscall   *ebpf.Program `ebpf:"SSL_write_entry_nested_syscall"`
	SSL_writeEntryOffset          *ebpf.Program `ebpf:"SSL_write_entry_offset"`
	SSL_writeExEntryNestedSyscall *ebpf.Program `ebpf:"SSL_write_ex_entry_nested_syscall"`
	SSL_writeExRetNestedSyscall   *ebpf.Program `ebpf:"SSL_write_ex_ret_nested_syscall"`
	SSL_writeRetNestedSyscall     *ebpf.Program `ebpf:"SSL_write_ret_nested_syscall"`
	SSL_writeRetOffset            *ebpf.Program `ebpf:"SSL_write_ret_offset"`
}

func (p *Openssl110aPrograms) Close() error {
	return _Openssl110aClose(
		p.SSL_readEntryNestedSyscall,
		p.SSL_readEntryOffset,
		p.SSL_readExEntryNestedSyscall,
		p.SSL_readExRetNestedSyscall,
		p.SSL_readRetNestedSyscall,
		p.SSL_readRetOffset,
		p.SSL_writeEntryNestedSyscall,
		p.SSL_writeEntryOffset,
		p.SSL_writeExEntryNestedSyscall,
		p.SSL_writeExRetNestedSyscall,
		p.SSL_writeRetNestedSyscall,
		p.SSL_writeRetOffset,
	)
}

func _Openssl110aClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed openssl110a_x86_bpfel.o
var _Openssl110aBytes []byte
