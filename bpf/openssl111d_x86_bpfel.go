// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64

package bpf

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type Openssl111dConnEvtT struct {
	ConnInfo Openssl111dConnInfoT
	ConnType Openssl111dConnTypeT
	_        [4]byte
	Ts       uint64
}

type Openssl111dConnIdS_t struct {
	TgidFd  uint64
	NoTrace bool
	_       [7]byte
}

type Openssl111dConnInfoT struct {
	ConnId struct {
		Upid struct {
			Pid            uint32
			_              [4]byte
			StartTimeTicks uint64
		}
		Fd   int32
		_    [4]byte
		Tsid uint64
	}
	ReadBytes     uint64
	WriteBytes    uint64
	SslReadBytes  uint64
	SslWriteBytes uint64
	Laddr         struct {
		In6 struct {
			Sin6Family   uint16
			Sin6Port     uint16
			Sin6Flowinfo uint32
			Sin6Addr     struct{ In6U struct{ U6Addr8 [16]uint8 } }
			Sin6ScopeId  uint32
		}
	}
	Raddr struct {
		In6 struct {
			Sin6Family   uint16
			Sin6Port     uint16
			Sin6Flowinfo uint32
			Sin6Addr     struct{ In6U struct{ U6Addr8 [16]uint8 } }
			Sin6ScopeId  uint32
		}
	}
	Protocol            Openssl111dTrafficProtocolT
	Role                Openssl111dEndpointRoleT
	PrevCount           uint64
	PrevBuf             [4]int8
	PrependLengthHeader bool
	NoTrace             bool
	Ssl                 bool
	_                   [1]byte
}

type Openssl111dConnTypeT uint32

const (
	Openssl111dConnTypeTKConnect       Openssl111dConnTypeT = 0
	Openssl111dConnTypeTKClose         Openssl111dConnTypeT = 1
	Openssl111dConnTypeTKProtocolInfer Openssl111dConnTypeT = 2
)

type Openssl111dControlValueIndexT uint32

const (
	Openssl111dControlValueIndexTKTargetTGIDIndex          Openssl111dControlValueIndexT = 0
	Openssl111dControlValueIndexTKStirlingTGIDIndex        Openssl111dControlValueIndexT = 1
	Openssl111dControlValueIndexTKEnabledXdpIndex          Openssl111dControlValueIndexT = 2
	Openssl111dControlValueIndexTKEnableFilterByPid        Openssl111dControlValueIndexT = 3
	Openssl111dControlValueIndexTKEnableFilterByLocalPort  Openssl111dControlValueIndexT = 4
	Openssl111dControlValueIndexTKEnableFilterByRemotePort Openssl111dControlValueIndexT = 5
	Openssl111dControlValueIndexTKEnableFilterByRemoteHost Openssl111dControlValueIndexT = 6
	Openssl111dControlValueIndexTKNumControlValues         Openssl111dControlValueIndexT = 7
)

type Openssl111dEndpointRoleT uint32

const (
	Openssl111dEndpointRoleTKRoleClient  Openssl111dEndpointRoleT = 1
	Openssl111dEndpointRoleTKRoleServer  Openssl111dEndpointRoleT = 2
	Openssl111dEndpointRoleTKRoleUnknown Openssl111dEndpointRoleT = 4
)

type Openssl111dKernEvt struct {
	FuncName [16]int8
	Ts       uint64
	Seq      uint64
	Len      uint32
	Flags    uint8
	_        [3]byte
	ConnIdS  Openssl111dConnIdS_t
	IsSample int32
	Step     Openssl111dStepT
}

type Openssl111dKernEvtData struct {
	Ke      Openssl111dKernEvt
	BufSize uint32
	Msg     [30720]int8
	_       [4]byte
}

type Openssl111dSockKey struct {
	Sip   [2]uint64
	Dip   [2]uint64
	Sport uint16
	Dport uint16
	_     [4]byte
}

type Openssl111dStepT uint32

const (
	Openssl111dStepTStart       Openssl111dStepT = 0
	Openssl111dStepTSSL_OUT     Openssl111dStepT = 1
	Openssl111dStepTSYSCALL_OUT Openssl111dStepT = 2
	Openssl111dStepTTCP_OUT     Openssl111dStepT = 3
	Openssl111dStepTIP_OUT      Openssl111dStepT = 4
	Openssl111dStepTQDISC_OUT   Openssl111dStepT = 5
	Openssl111dStepTDEV_OUT     Openssl111dStepT = 6
	Openssl111dStepTNIC_OUT     Openssl111dStepT = 7
	Openssl111dStepTNIC_IN      Openssl111dStepT = 8
	Openssl111dStepTDEV_IN      Openssl111dStepT = 9
	Openssl111dStepTIP_IN       Openssl111dStepT = 10
	Openssl111dStepTTCP_IN      Openssl111dStepT = 11
	Openssl111dStepTUSER_COPY   Openssl111dStepT = 12
	Openssl111dStepTSYSCALL_IN  Openssl111dStepT = 13
	Openssl111dStepTSSL_IN      Openssl111dStepT = 14
	Openssl111dStepTEnd         Openssl111dStepT = 15
)

type Openssl111dTrafficDirectionT uint32

const (
	Openssl111dTrafficDirectionTKEgress  Openssl111dTrafficDirectionT = 0
	Openssl111dTrafficDirectionTKIngress Openssl111dTrafficDirectionT = 1
)

type Openssl111dTrafficProtocolT uint32

const (
	Openssl111dTrafficProtocolTKProtocolUnset   Openssl111dTrafficProtocolT = 0
	Openssl111dTrafficProtocolTKProtocolUnknown Openssl111dTrafficProtocolT = 1
	Openssl111dTrafficProtocolTKProtocolHTTP    Openssl111dTrafficProtocolT = 2
	Openssl111dTrafficProtocolTKProtocolHTTP2   Openssl111dTrafficProtocolT = 3
	Openssl111dTrafficProtocolTKProtocolMySQL   Openssl111dTrafficProtocolT = 4
	Openssl111dTrafficProtocolTKProtocolCQL     Openssl111dTrafficProtocolT = 5
	Openssl111dTrafficProtocolTKProtocolPGSQL   Openssl111dTrafficProtocolT = 6
	Openssl111dTrafficProtocolTKProtocolDNS     Openssl111dTrafficProtocolT = 7
	Openssl111dTrafficProtocolTKProtocolRedis   Openssl111dTrafficProtocolT = 8
	Openssl111dTrafficProtocolTKProtocolNATS    Openssl111dTrafficProtocolT = 9
	Openssl111dTrafficProtocolTKProtocolMongo   Openssl111dTrafficProtocolT = 10
	Openssl111dTrafficProtocolTKProtocolKafka   Openssl111dTrafficProtocolT = 11
	Openssl111dTrafficProtocolTKProtocolMux     Openssl111dTrafficProtocolT = 12
	Openssl111dTrafficProtocolTKProtocolAMQP    Openssl111dTrafficProtocolT = 13
	Openssl111dTrafficProtocolTKNumProtocols    Openssl111dTrafficProtocolT = 14
)

// LoadOpenssl111d returns the embedded CollectionSpec for Openssl111d.
func LoadOpenssl111d() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_Openssl111dBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load Openssl111d: %w", err)
	}

	return spec, err
}

// LoadOpenssl111dObjects loads Openssl111d and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*Openssl111dObjects
//	*Openssl111dPrograms
//	*Openssl111dMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func LoadOpenssl111dObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := LoadOpenssl111d()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// Openssl111dSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type Openssl111dSpecs struct {
	Openssl111dProgramSpecs
	Openssl111dMapSpecs
}

// Openssl111dSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type Openssl111dProgramSpecs struct {
	SSL_readEntryNestedSyscall    *ebpf.ProgramSpec `ebpf:"SSL_read_entry_nested_syscall"`
	SSL_readEntryOffset           *ebpf.ProgramSpec `ebpf:"SSL_read_entry_offset"`
	SSL_readExEntryNestedSyscall  *ebpf.ProgramSpec `ebpf:"SSL_read_ex_entry_nested_syscall"`
	SSL_readExRetNestedSyscall    *ebpf.ProgramSpec `ebpf:"SSL_read_ex_ret_nested_syscall"`
	SSL_readRetNestedSyscall      *ebpf.ProgramSpec `ebpf:"SSL_read_ret_nested_syscall"`
	SSL_readRetOffset             *ebpf.ProgramSpec `ebpf:"SSL_read_ret_offset"`
	SSL_writeEntryNestedSyscall   *ebpf.ProgramSpec `ebpf:"SSL_write_entry_nested_syscall"`
	SSL_writeEntryOffset          *ebpf.ProgramSpec `ebpf:"SSL_write_entry_offset"`
	SSL_writeExEntryNestedSyscall *ebpf.ProgramSpec `ebpf:"SSL_write_ex_entry_nested_syscall"`
	SSL_writeExRetNestedSyscall   *ebpf.ProgramSpec `ebpf:"SSL_write_ex_ret_nested_syscall"`
	SSL_writeRetNestedSyscall     *ebpf.ProgramSpec `ebpf:"SSL_write_ret_nested_syscall"`
	SSL_writeRetOffset            *ebpf.ProgramSpec `ebpf:"SSL_write_ret_offset"`
}

// Openssl111dMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type Openssl111dMapSpecs struct {
	ActiveSslReadArgsMap  *ebpf.MapSpec `ebpf:"active_ssl_read_args_map"`
	ActiveSslWriteArgsMap *ebpf.MapSpec `ebpf:"active_ssl_write_args_map"`
	ConnEvtRb             *ebpf.MapSpec `ebpf:"conn_evt_rb"`
	ConnInfoMap           *ebpf.MapSpec `ebpf:"conn_info_map"`
	FilterMntnsMap        *ebpf.MapSpec `ebpf:"filter_mntns_map"`
	FilterNetnsMap        *ebpf.MapSpec `ebpf:"filter_netns_map"`
	FilterPidMap          *ebpf.MapSpec `ebpf:"filter_pid_map"`
	FilterPidnsMap        *ebpf.MapSpec `ebpf:"filter_pidns_map"`
	Rb                    *ebpf.MapSpec `ebpf:"rb"`
	SslDataMap            *ebpf.MapSpec `ebpf:"ssl_data_map"`
	SslRb                 *ebpf.MapSpec `ebpf:"ssl_rb"`
	SslUserSpaceCallMap   *ebpf.MapSpec `ebpf:"ssl_user_space_call_map"`
	SyscallDataMap        *ebpf.MapSpec `ebpf:"syscall_data_map"`
	SyscallRb             *ebpf.MapSpec `ebpf:"syscall_rb"`
}

// Openssl111dObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to LoadOpenssl111dObjects or ebpf.CollectionSpec.LoadAndAssign.
type Openssl111dObjects struct {
	Openssl111dPrograms
	Openssl111dMaps
}

func (o *Openssl111dObjects) Close() error {
	return _Openssl111dClose(
		&o.Openssl111dPrograms,
		&o.Openssl111dMaps,
	)
}

// Openssl111dMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to LoadOpenssl111dObjects or ebpf.CollectionSpec.LoadAndAssign.
type Openssl111dMaps struct {
	ActiveSslReadArgsMap  *ebpf.Map `ebpf:"active_ssl_read_args_map"`
	ActiveSslWriteArgsMap *ebpf.Map `ebpf:"active_ssl_write_args_map"`
	ConnEvtRb             *ebpf.Map `ebpf:"conn_evt_rb"`
	ConnInfoMap           *ebpf.Map `ebpf:"conn_info_map"`
	FilterMntnsMap        *ebpf.Map `ebpf:"filter_mntns_map"`
	FilterNetnsMap        *ebpf.Map `ebpf:"filter_netns_map"`
	FilterPidMap          *ebpf.Map `ebpf:"filter_pid_map"`
	FilterPidnsMap        *ebpf.Map `ebpf:"filter_pidns_map"`
	Rb                    *ebpf.Map `ebpf:"rb"`
	SslDataMap            *ebpf.Map `ebpf:"ssl_data_map"`
	SslRb                 *ebpf.Map `ebpf:"ssl_rb"`
	SslUserSpaceCallMap   *ebpf.Map `ebpf:"ssl_user_space_call_map"`
	SyscallDataMap        *ebpf.Map `ebpf:"syscall_data_map"`
	SyscallRb             *ebpf.Map `ebpf:"syscall_rb"`
}

func (m *Openssl111dMaps) Close() error {
	return _Openssl111dClose(
		m.ActiveSslReadArgsMap,
		m.ActiveSslWriteArgsMap,
		m.ConnEvtRb,
		m.ConnInfoMap,
		m.FilterMntnsMap,
		m.FilterNetnsMap,
		m.FilterPidMap,
		m.FilterPidnsMap,
		m.Rb,
		m.SslDataMap,
		m.SslRb,
		m.SslUserSpaceCallMap,
		m.SyscallDataMap,
		m.SyscallRb,
	)
}

// Openssl111dPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to LoadOpenssl111dObjects or ebpf.CollectionSpec.LoadAndAssign.
type Openssl111dPrograms struct {
	SSL_readEntryNestedSyscall    *ebpf.Program `ebpf:"SSL_read_entry_nested_syscall"`
	SSL_readEntryOffset           *ebpf.Program `ebpf:"SSL_read_entry_offset"`
	SSL_readExEntryNestedSyscall  *ebpf.Program `ebpf:"SSL_read_ex_entry_nested_syscall"`
	SSL_readExRetNestedSyscall    *ebpf.Program `ebpf:"SSL_read_ex_ret_nested_syscall"`
	SSL_readRetNestedSyscall      *ebpf.Program `ebpf:"SSL_read_ret_nested_syscall"`
	SSL_readRetOffset             *ebpf.Program `ebpf:"SSL_read_ret_offset"`
	SSL_writeEntryNestedSyscall   *ebpf.Program `ebpf:"SSL_write_entry_nested_syscall"`
	SSL_writeEntryOffset          *ebpf.Program `ebpf:"SSL_write_entry_offset"`
	SSL_writeExEntryNestedSyscall *ebpf.Program `ebpf:"SSL_write_ex_entry_nested_syscall"`
	SSL_writeExRetNestedSyscall   *ebpf.Program `ebpf:"SSL_write_ex_ret_nested_syscall"`
	SSL_writeRetNestedSyscall     *ebpf.Program `ebpf:"SSL_write_ret_nested_syscall"`
	SSL_writeRetOffset            *ebpf.Program `ebpf:"SSL_write_ret_offset"`
}

func (p *Openssl111dPrograms) Close() error {
	return _Openssl111dClose(
		p.SSL_readEntryNestedSyscall,
		p.SSL_readEntryOffset,
		p.SSL_readExEntryNestedSyscall,
		p.SSL_readExRetNestedSyscall,
		p.SSL_readRetNestedSyscall,
		p.SSL_readRetOffset,
		p.SSL_writeEntryNestedSyscall,
		p.SSL_writeEntryOffset,
		p.SSL_writeExEntryNestedSyscall,
		p.SSL_writeExRetNestedSyscall,
		p.SSL_writeRetNestedSyscall,
		p.SSL_writeRetOffset,
	)
}

func _Openssl111dClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed openssl111d_x86_bpfel.o
var _Openssl111dBytes []byte
