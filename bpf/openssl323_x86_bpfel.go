// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64

package bpf

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type Openssl323ConnEvtT struct {
	ConnInfo Openssl323ConnInfoT
	ConnType Openssl323ConnTypeT
	_        [4]byte
	Ts       uint64
}

type Openssl323ConnIdS_t struct {
	TgidFd  uint64
	NoTrace bool
	_       [7]byte
}

type Openssl323ConnInfoT struct {
	ConnId struct {
		Upid struct {
			Pid            uint32
			_              [4]byte
			StartTimeTicks uint64
		}
		Fd   int32
		_    [4]byte
		Tsid uint64
	}
	ReadBytes     uint64
	WriteBytes    uint64
	SslReadBytes  uint64
	SslWriteBytes uint64
	Laddr         struct {
		In6 struct {
			Sin6Family   uint16
			Sin6Port     uint16
			Sin6Flowinfo uint32
			Sin6Addr     struct{ In6U struct{ U6Addr8 [16]uint8 } }
			Sin6ScopeId  uint32
		}
	}
	Raddr struct {
		In6 struct {
			Sin6Family   uint16
			Sin6Port     uint16
			Sin6Flowinfo uint32
			Sin6Addr     struct{ In6U struct{ U6Addr8 [16]uint8 } }
			Sin6ScopeId  uint32
		}
	}
	Protocol            Openssl323TrafficProtocolT
	Role                Openssl323EndpointRoleT
	PrevCount           uint64
	PrevBuf             [4]int8
	PrependLengthHeader bool
	NoTrace             bool
	Ssl                 bool
	_                   [1]byte
}

type Openssl323ConnTypeT uint32

const (
	Openssl323ConnTypeTKConnect       Openssl323ConnTypeT = 0
	Openssl323ConnTypeTKClose         Openssl323ConnTypeT = 1
	Openssl323ConnTypeTKProtocolInfer Openssl323ConnTypeT = 2
)

type Openssl323ControlValueIndexT uint32

const (
	Openssl323ControlValueIndexTKTargetTGIDIndex          Openssl323ControlValueIndexT = 0
	Openssl323ControlValueIndexTKStirlingTGIDIndex        Openssl323ControlValueIndexT = 1
	Openssl323ControlValueIndexTKEnabledXdpIndex          Openssl323ControlValueIndexT = 2
	Openssl323ControlValueIndexTKEnableFilterByPid        Openssl323ControlValueIndexT = 3
	Openssl323ControlValueIndexTKEnableFilterByLocalPort  Openssl323ControlValueIndexT = 4
	Openssl323ControlValueIndexTKEnableFilterByRemotePort Openssl323ControlValueIndexT = 5
	Openssl323ControlValueIndexTKEnableFilterByRemoteHost Openssl323ControlValueIndexT = 6
	Openssl323ControlValueIndexTKNumControlValues         Openssl323ControlValueIndexT = 7
)

type Openssl323EndpointRoleT uint32

const (
	Openssl323EndpointRoleTKRoleClient  Openssl323EndpointRoleT = 1
	Openssl323EndpointRoleTKRoleServer  Openssl323EndpointRoleT = 2
	Openssl323EndpointRoleTKRoleUnknown Openssl323EndpointRoleT = 4
)

type Openssl323KernEvt struct {
	FuncName [16]int8
	Ts       uint64
	Seq      uint64
	Len      uint32
	Flags    uint8
	_        [3]byte
	ConnIdS  Openssl323ConnIdS_t
	IsSample int32
	Step     Openssl323StepT
}

type Openssl323KernEvtData struct {
	Ke      Openssl323KernEvt
	BufSize uint32
	Msg     [30720]int8
	_       [4]byte
}

type Openssl323SockKey struct {
	Sip   [2]uint64
	Dip   [2]uint64
	Sport uint16
	Dport uint16
	_     [4]byte
}

type Openssl323StepT uint32

const (
	Openssl323StepTStart       Openssl323StepT = 0
	Openssl323StepTSSL_OUT     Openssl323StepT = 1
	Openssl323StepTSYSCALL_OUT Openssl323StepT = 2
	Openssl323StepTTCP_OUT     Openssl323StepT = 3
	Openssl323StepTIP_OUT      Openssl323StepT = 4
	Openssl323StepTQDISC_OUT   Openssl323StepT = 5
	Openssl323StepTDEV_OUT     Openssl323StepT = 6
	Openssl323StepTNIC_OUT     Openssl323StepT = 7
	Openssl323StepTNIC_IN      Openssl323StepT = 8
	Openssl323StepTDEV_IN      Openssl323StepT = 9
	Openssl323StepTIP_IN       Openssl323StepT = 10
	Openssl323StepTTCP_IN      Openssl323StepT = 11
	Openssl323StepTUSER_COPY   Openssl323StepT = 12
	Openssl323StepTSYSCALL_IN  Openssl323StepT = 13
	Openssl323StepTSSL_IN      Openssl323StepT = 14
	Openssl323StepTEnd         Openssl323StepT = 15
)

type Openssl323TrafficDirectionT uint32

const (
	Openssl323TrafficDirectionTKEgress  Openssl323TrafficDirectionT = 0
	Openssl323TrafficDirectionTKIngress Openssl323TrafficDirectionT = 1
)

type Openssl323TrafficProtocolT uint32

const (
	Openssl323TrafficProtocolTKProtocolUnset   Openssl323TrafficProtocolT = 0
	Openssl323TrafficProtocolTKProtocolUnknown Openssl323TrafficProtocolT = 1
	Openssl323TrafficProtocolTKProtocolHTTP    Openssl323TrafficProtocolT = 2
	Openssl323TrafficProtocolTKProtocolHTTP2   Openssl323TrafficProtocolT = 3
	Openssl323TrafficProtocolTKProtocolMySQL   Openssl323TrafficProtocolT = 4
	Openssl323TrafficProtocolTKProtocolCQL     Openssl323TrafficProtocolT = 5
	Openssl323TrafficProtocolTKProtocolPGSQL   Openssl323TrafficProtocolT = 6
	Openssl323TrafficProtocolTKProtocolDNS     Openssl323TrafficProtocolT = 7
	Openssl323TrafficProtocolTKProtocolRedis   Openssl323TrafficProtocolT = 8
	Openssl323TrafficProtocolTKProtocolNATS    Openssl323TrafficProtocolT = 9
	Openssl323TrafficProtocolTKProtocolMongo   Openssl323TrafficProtocolT = 10
	Openssl323TrafficProtocolTKProtocolKafka   Openssl323TrafficProtocolT = 11
	Openssl323TrafficProtocolTKProtocolMux     Openssl323TrafficProtocolT = 12
	Openssl323TrafficProtocolTKProtocolAMQP    Openssl323TrafficProtocolT = 13
	Openssl323TrafficProtocolTKNumProtocols    Openssl323TrafficProtocolT = 14
)

// LoadOpenssl323 returns the embedded CollectionSpec for Openssl323.
func LoadOpenssl323() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_Openssl323Bytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load Openssl323: %w", err)
	}

	return spec, err
}

// LoadOpenssl323Objects loads Openssl323 and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*Openssl323Objects
//	*Openssl323Programs
//	*Openssl323Maps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func LoadOpenssl323Objects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := LoadOpenssl323()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// Openssl323Specs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type Openssl323Specs struct {
	Openssl323ProgramSpecs
	Openssl323MapSpecs
}

// Openssl323Specs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type Openssl323ProgramSpecs struct {
	SSL_readEntryNestedSyscall    *ebpf.ProgramSpec `ebpf:"SSL_read_entry_nested_syscall"`
	SSL_readEntryOffset           *ebpf.ProgramSpec `ebpf:"SSL_read_entry_offset"`
	SSL_readExEntryNestedSyscall  *ebpf.ProgramSpec `ebpf:"SSL_read_ex_entry_nested_syscall"`
	SSL_readExRetNestedSyscall    *ebpf.ProgramSpec `ebpf:"SSL_read_ex_ret_nested_syscall"`
	SSL_readRetNestedSyscall      *ebpf.ProgramSpec `ebpf:"SSL_read_ret_nested_syscall"`
	SSL_readRetOffset             *ebpf.ProgramSpec `ebpf:"SSL_read_ret_offset"`
	SSL_writeEntryNestedSyscall   *ebpf.ProgramSpec `ebpf:"SSL_write_entry_nested_syscall"`
	SSL_writeEntryOffset          *ebpf.ProgramSpec `ebpf:"SSL_write_entry_offset"`
	SSL_writeExEntryNestedSyscall *ebpf.ProgramSpec `ebpf:"SSL_write_ex_entry_nested_syscall"`
	SSL_writeExRetNestedSyscall   *ebpf.ProgramSpec `ebpf:"SSL_write_ex_ret_nested_syscall"`
	SSL_writeRetNestedSyscall     *ebpf.ProgramSpec `ebpf:"SSL_write_ret_nested_syscall"`
	SSL_writeRetOffset            *ebpf.ProgramSpec `ebpf:"SSL_write_ret_offset"`
}

// Openssl323MapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type Openssl323MapSpecs struct {
	ActiveSslReadArgsMap  *ebpf.MapSpec `ebpf:"active_ssl_read_args_map"`
	ActiveSslWriteArgsMap *ebpf.MapSpec `ebpf:"active_ssl_write_args_map"`
	ConnEvtRb             *ebpf.MapSpec `ebpf:"conn_evt_rb"`
	ConnInfoMap           *ebpf.MapSpec `ebpf:"conn_info_map"`
	FilterMntnsMap        *ebpf.MapSpec `ebpf:"filter_mntns_map"`
	FilterNetnsMap        *ebpf.MapSpec `ebpf:"filter_netns_map"`
	FilterPidMap          *ebpf.MapSpec `ebpf:"filter_pid_map"`
	FilterPidnsMap        *ebpf.MapSpec `ebpf:"filter_pidns_map"`
	Rb                    *ebpf.MapSpec `ebpf:"rb"`
	SslDataMap            *ebpf.MapSpec `ebpf:"ssl_data_map"`
	SslRb                 *ebpf.MapSpec `ebpf:"ssl_rb"`
	SslUserSpaceCallMap   *ebpf.MapSpec `ebpf:"ssl_user_space_call_map"`
	SyscallDataMap        *ebpf.MapSpec `ebpf:"syscall_data_map"`
	SyscallRb             *ebpf.MapSpec `ebpf:"syscall_rb"`
}

// Openssl323Objects contains all objects after they have been loaded into the kernel.
//
// It can be passed to LoadOpenssl323Objects or ebpf.CollectionSpec.LoadAndAssign.
type Openssl323Objects struct {
	Openssl323Programs
	Openssl323Maps
}

func (o *Openssl323Objects) Close() error {
	return _Openssl323Close(
		&o.Openssl323Programs,
		&o.Openssl323Maps,
	)
}

// Openssl323Maps contains all maps after they have been loaded into the kernel.
//
// It can be passed to LoadOpenssl323Objects or ebpf.CollectionSpec.LoadAndAssign.
type Openssl323Maps struct {
	ActiveSslReadArgsMap  *ebpf.Map `ebpf:"active_ssl_read_args_map"`
	ActiveSslWriteArgsMap *ebpf.Map `ebpf:"active_ssl_write_args_map"`
	ConnEvtRb             *ebpf.Map `ebpf:"conn_evt_rb"`
	ConnInfoMap           *ebpf.Map `ebpf:"conn_info_map"`
	FilterMntnsMap        *ebpf.Map `ebpf:"filter_mntns_map"`
	FilterNetnsMap        *ebpf.Map `ebpf:"filter_netns_map"`
	FilterPidMap          *ebpf.Map `ebpf:"filter_pid_map"`
	FilterPidnsMap        *ebpf.Map `ebpf:"filter_pidns_map"`
	Rb                    *ebpf.Map `ebpf:"rb"`
	SslDataMap            *ebpf.Map `ebpf:"ssl_data_map"`
	SslRb                 *ebpf.Map `ebpf:"ssl_rb"`
	SslUserSpaceCallMap   *ebpf.Map `ebpf:"ssl_user_space_call_map"`
	SyscallDataMap        *ebpf.Map `ebpf:"syscall_data_map"`
	SyscallRb             *ebpf.Map `ebpf:"syscall_rb"`
}

func (m *Openssl323Maps) Close() error {
	return _Openssl323Close(
		m.ActiveSslReadArgsMap,
		m.ActiveSslWriteArgsMap,
		m.ConnEvtRb,
		m.ConnInfoMap,
		m.FilterMntnsMap,
		m.FilterNetnsMap,
		m.FilterPidMap,
		m.FilterPidnsMap,
		m.Rb,
		m.SslDataMap,
		m.SslRb,
		m.SslUserSpaceCallMap,
		m.SyscallDataMap,
		m.SyscallRb,
	)
}

// Openssl323Programs contains all programs after they have been loaded into the kernel.
//
// It can be passed to LoadOpenssl323Objects or ebpf.CollectionSpec.LoadAndAssign.
type Openssl323Programs struct {
	SSL_readEntryNestedSyscall    *ebpf.Program `ebpf:"SSL_read_entry_nested_syscall"`
	SSL_readEntryOffset           *ebpf.Program `ebpf:"SSL_read_entry_offset"`
	SSL_readExEntryNestedSyscall  *ebpf.Program `ebpf:"SSL_read_ex_entry_nested_syscall"`
	SSL_readExRetNestedSyscall    *ebpf.Program `ebpf:"SSL_read_ex_ret_nested_syscall"`
	SSL_readRetNestedSyscall      *ebpf.Program `ebpf:"SSL_read_ret_nested_syscall"`
	SSL_readRetOffset             *ebpf.Program `ebpf:"SSL_read_ret_offset"`
	SSL_writeEntryNestedSyscall   *ebpf.Program `ebpf:"SSL_write_entry_nested_syscall"`
	SSL_writeEntryOffset          *ebpf.Program `ebpf:"SSL_write_entry_offset"`
	SSL_writeExEntryNestedSyscall *ebpf.Program `ebpf:"SSL_write_ex_entry_nested_syscall"`
	SSL_writeExRetNestedSyscall   *ebpf.Program `ebpf:"SSL_write_ex_ret_nested_syscall"`
	SSL_writeRetNestedSyscall     *ebpf.Program `ebpf:"SSL_write_ret_nested_syscall"`
	SSL_writeRetOffset            *ebpf.Program `ebpf:"SSL_write_ret_offset"`
}

func (p *Openssl323Programs) Close() error {
	return _Openssl323Close(
		p.SSL_readEntryNestedSyscall,
		p.SSL_readEntryOffset,
		p.SSL_readExEntryNestedSyscall,
		p.SSL_readExRetNestedSyscall,
		p.SSL_readRetNestedSyscall,
		p.SSL_readRetOffset,
		p.SSL_writeEntryNestedSyscall,
		p.SSL_writeEntryOffset,
		p.SSL_writeExEntryNestedSyscall,
		p.SSL_writeExRetNestedSyscall,
		p.SSL_writeRetNestedSyscall,
		p.SSL_writeRetOffset,
	)
}

func _Openssl323Close(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed openssl323_x86_bpfel.o
var _Openssl323Bytes []byte
