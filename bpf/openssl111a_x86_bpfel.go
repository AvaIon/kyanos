// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64

package bpf

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type Openssl111aConnEvtT struct {
	ConnInfo Openssl111aConnInfoT
	ConnType Openssl111aConnTypeT
	_        [4]byte
	Ts       uint64
}

type Openssl111aConnIdS_t struct {
	TgidFd  uint64
	NoTrace bool
	_       [7]byte
}

type Openssl111aConnInfoT struct {
	ConnId struct {
		Upid struct {
			Pid            uint32
			_              [4]byte
			StartTimeTicks uint64
		}
		Fd   int32
		_    [4]byte
		Tsid uint64
	}
	ReadBytes     uint64
	WriteBytes    uint64
	SslReadBytes  uint64
	SslWriteBytes uint64
	Laddr         struct {
		In6 struct {
			Sin6Family   uint16
			Sin6Port     uint16
			Sin6Flowinfo uint32
			Sin6Addr     struct{ In6U struct{ U6Addr8 [16]uint8 } }
			Sin6ScopeId  uint32
		}
	}
	Raddr struct {
		In6 struct {
			Sin6Family   uint16
			Sin6Port     uint16
			Sin6Flowinfo uint32
			Sin6Addr     struct{ In6U struct{ U6Addr8 [16]uint8 } }
			Sin6ScopeId  uint32
		}
	}
	Protocol            Openssl111aTrafficProtocolT
	Role                Openssl111aEndpointRoleT
	PrevCount           uint64
	PrevBuf             [4]int8
	PrependLengthHeader bool
	NoTrace             bool
	Ssl                 bool
	_                   [1]byte
}

type Openssl111aConnTypeT uint32

const (
	Openssl111aConnTypeTKConnect       Openssl111aConnTypeT = 0
	Openssl111aConnTypeTKClose         Openssl111aConnTypeT = 1
	Openssl111aConnTypeTKProtocolInfer Openssl111aConnTypeT = 2
)

type Openssl111aControlValueIndexT uint32

const (
	Openssl111aControlValueIndexTKTargetTGIDIndex          Openssl111aControlValueIndexT = 0
	Openssl111aControlValueIndexTKStirlingTGIDIndex        Openssl111aControlValueIndexT = 1
	Openssl111aControlValueIndexTKEnabledXdpIndex          Openssl111aControlValueIndexT = 2
	Openssl111aControlValueIndexTKEnableFilterByPid        Openssl111aControlValueIndexT = 3
	Openssl111aControlValueIndexTKEnableFilterByLocalPort  Openssl111aControlValueIndexT = 4
	Openssl111aControlValueIndexTKEnableFilterByRemotePort Openssl111aControlValueIndexT = 5
	Openssl111aControlValueIndexTKEnableFilterByRemoteHost Openssl111aControlValueIndexT = 6
	Openssl111aControlValueIndexTKNumControlValues         Openssl111aControlValueIndexT = 7
)

type Openssl111aEndpointRoleT uint32

const (
	Openssl111aEndpointRoleTKRoleClient  Openssl111aEndpointRoleT = 1
	Openssl111aEndpointRoleTKRoleServer  Openssl111aEndpointRoleT = 2
	Openssl111aEndpointRoleTKRoleUnknown Openssl111aEndpointRoleT = 4
)

type Openssl111aKernEvt struct {
	FuncName [16]int8
	Ts       uint64
	Seq      uint64
	Len      uint32
	Flags    uint8
	_        [3]byte
	Ifindex  uint32
	_        [4]byte
	ConnIdS  Openssl111aConnIdS_t
	Step     Openssl111aStepT
	_        [4]byte
}

type Openssl111aKernEvtData struct {
	Ke      Openssl111aKernEvt
	BufSize uint32
	Msg     [30720]int8
	_       [4]byte
}

type Openssl111aSockKey struct {
	Sip   [2]uint64
	Dip   [2]uint64
	Sport uint16
	Dport uint16
	_     [4]byte
}

type Openssl111aStepT uint32

const (
	Openssl111aStepTStart       Openssl111aStepT = 0
	Openssl111aStepTSSL_OUT     Openssl111aStepT = 1
	Openssl111aStepTSYSCALL_OUT Openssl111aStepT = 2
	Openssl111aStepTTCP_OUT     Openssl111aStepT = 3
	Openssl111aStepTIP_OUT      Openssl111aStepT = 4
	Openssl111aStepTQDISC_OUT   Openssl111aStepT = 5
	Openssl111aStepTDEV_OUT     Openssl111aStepT = 6
	Openssl111aStepTNIC_OUT     Openssl111aStepT = 7
	Openssl111aStepTNIC_IN      Openssl111aStepT = 8
	Openssl111aStepTDEV_IN      Openssl111aStepT = 9
	Openssl111aStepTIP_IN       Openssl111aStepT = 10
	Openssl111aStepTTCP_IN      Openssl111aStepT = 11
	Openssl111aStepTUSER_COPY   Openssl111aStepT = 12
	Openssl111aStepTSYSCALL_IN  Openssl111aStepT = 13
	Openssl111aStepTSSL_IN      Openssl111aStepT = 14
	Openssl111aStepTEnd         Openssl111aStepT = 15
)

type Openssl111aTrafficDirectionT uint32

const (
	Openssl111aTrafficDirectionTKEgress  Openssl111aTrafficDirectionT = 0
	Openssl111aTrafficDirectionTKIngress Openssl111aTrafficDirectionT = 1
)

type Openssl111aTrafficProtocolT uint32

const (
	Openssl111aTrafficProtocolTKProtocolUnset   Openssl111aTrafficProtocolT = 0
	Openssl111aTrafficProtocolTKProtocolUnknown Openssl111aTrafficProtocolT = 1
	Openssl111aTrafficProtocolTKProtocolHTTP    Openssl111aTrafficProtocolT = 2
	Openssl111aTrafficProtocolTKProtocolHTTP2   Openssl111aTrafficProtocolT = 3
	Openssl111aTrafficProtocolTKProtocolMySQL   Openssl111aTrafficProtocolT = 4
	Openssl111aTrafficProtocolTKProtocolCQL     Openssl111aTrafficProtocolT = 5
	Openssl111aTrafficProtocolTKProtocolPGSQL   Openssl111aTrafficProtocolT = 6
	Openssl111aTrafficProtocolTKProtocolDNS     Openssl111aTrafficProtocolT = 7
	Openssl111aTrafficProtocolTKProtocolRedis   Openssl111aTrafficProtocolT = 8
	Openssl111aTrafficProtocolTKProtocolNATS    Openssl111aTrafficProtocolT = 9
	Openssl111aTrafficProtocolTKProtocolMongo   Openssl111aTrafficProtocolT = 10
	Openssl111aTrafficProtocolTKProtocolKafka   Openssl111aTrafficProtocolT = 11
	Openssl111aTrafficProtocolTKProtocolMux     Openssl111aTrafficProtocolT = 12
	Openssl111aTrafficProtocolTKProtocolAMQP    Openssl111aTrafficProtocolT = 13
	Openssl111aTrafficProtocolTKNumProtocols    Openssl111aTrafficProtocolT = 14
)

// LoadOpenssl111a returns the embedded CollectionSpec for Openssl111a.
func LoadOpenssl111a() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_Openssl111aBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load Openssl111a: %w", err)
	}

	return spec, err
}

// LoadOpenssl111aObjects loads Openssl111a and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*Openssl111aObjects
//	*Openssl111aPrograms
//	*Openssl111aMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func LoadOpenssl111aObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := LoadOpenssl111a()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// Openssl111aSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type Openssl111aSpecs struct {
	Openssl111aProgramSpecs
	Openssl111aMapSpecs
}

// Openssl111aSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type Openssl111aProgramSpecs struct {
	SSL_readEntryNestedSyscall    *ebpf.ProgramSpec `ebpf:"SSL_read_entry_nested_syscall"`
	SSL_readEntryOffset           *ebpf.ProgramSpec `ebpf:"SSL_read_entry_offset"`
	SSL_readExEntryNestedSyscall  *ebpf.ProgramSpec `ebpf:"SSL_read_ex_entry_nested_syscall"`
	SSL_readExRetNestedSyscall    *ebpf.ProgramSpec `ebpf:"SSL_read_ex_ret_nested_syscall"`
	SSL_readRetNestedSyscall      *ebpf.ProgramSpec `ebpf:"SSL_read_ret_nested_syscall"`
	SSL_readRetOffset             *ebpf.ProgramSpec `ebpf:"SSL_read_ret_offset"`
	SSL_writeEntryNestedSyscall   *ebpf.ProgramSpec `ebpf:"SSL_write_entry_nested_syscall"`
	SSL_writeEntryOffset          *ebpf.ProgramSpec `ebpf:"SSL_write_entry_offset"`
	SSL_writeExEntryNestedSyscall *ebpf.ProgramSpec `ebpf:"SSL_write_ex_entry_nested_syscall"`
	SSL_writeExRetNestedSyscall   *ebpf.ProgramSpec `ebpf:"SSL_write_ex_ret_nested_syscall"`
	SSL_writeRetNestedSyscall     *ebpf.ProgramSpec `ebpf:"SSL_write_ret_nested_syscall"`
	SSL_writeRetOffset            *ebpf.ProgramSpec `ebpf:"SSL_write_ret_offset"`
}

// Openssl111aMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type Openssl111aMapSpecs struct {
	ActiveSslReadArgsMap  *ebpf.MapSpec `ebpf:"active_ssl_read_args_map"`
	ActiveSslWriteArgsMap *ebpf.MapSpec `ebpf:"active_ssl_write_args_map"`
	ConnEvtRb             *ebpf.MapSpec `ebpf:"conn_evt_rb"`
	ConnInfoMap           *ebpf.MapSpec `ebpf:"conn_info_map"`
	FilterMntnsMap        *ebpf.MapSpec `ebpf:"filter_mntns_map"`
	FilterNetnsMap        *ebpf.MapSpec `ebpf:"filter_netns_map"`
	FilterPidMap          *ebpf.MapSpec `ebpf:"filter_pid_map"`
	FilterPidnsMap        *ebpf.MapSpec `ebpf:"filter_pidns_map"`
	Rb                    *ebpf.MapSpec `ebpf:"rb"`
	SslDataMap            *ebpf.MapSpec `ebpf:"ssl_data_map"`
	SslRb                 *ebpf.MapSpec `ebpf:"ssl_rb"`
	SslUserSpaceCallMap   *ebpf.MapSpec `ebpf:"ssl_user_space_call_map"`
	SyscallDataMap        *ebpf.MapSpec `ebpf:"syscall_data_map"`
	SyscallRb             *ebpf.MapSpec `ebpf:"syscall_rb"`
}

// Openssl111aObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to LoadOpenssl111aObjects or ebpf.CollectionSpec.LoadAndAssign.
type Openssl111aObjects struct {
	Openssl111aPrograms
	Openssl111aMaps
}

func (o *Openssl111aObjects) Close() error {
	return _Openssl111aClose(
		&o.Openssl111aPrograms,
		&o.Openssl111aMaps,
	)
}

// Openssl111aMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to LoadOpenssl111aObjects or ebpf.CollectionSpec.LoadAndAssign.
type Openssl111aMaps struct {
	ActiveSslReadArgsMap  *ebpf.Map `ebpf:"active_ssl_read_args_map"`
	ActiveSslWriteArgsMap *ebpf.Map `ebpf:"active_ssl_write_args_map"`
	ConnEvtRb             *ebpf.Map `ebpf:"conn_evt_rb"`
	ConnInfoMap           *ebpf.Map `ebpf:"conn_info_map"`
	FilterMntnsMap        *ebpf.Map `ebpf:"filter_mntns_map"`
	FilterNetnsMap        *ebpf.Map `ebpf:"filter_netns_map"`
	FilterPidMap          *ebpf.Map `ebpf:"filter_pid_map"`
	FilterPidnsMap        *ebpf.Map `ebpf:"filter_pidns_map"`
	Rb                    *ebpf.Map `ebpf:"rb"`
	SslDataMap            *ebpf.Map `ebpf:"ssl_data_map"`
	SslRb                 *ebpf.Map `ebpf:"ssl_rb"`
	SslUserSpaceCallMap   *ebpf.Map `ebpf:"ssl_user_space_call_map"`
	SyscallDataMap        *ebpf.Map `ebpf:"syscall_data_map"`
	SyscallRb             *ebpf.Map `ebpf:"syscall_rb"`
}

func (m *Openssl111aMaps) Close() error {
	return _Openssl111aClose(
		m.ActiveSslReadArgsMap,
		m.ActiveSslWriteArgsMap,
		m.ConnEvtRb,
		m.ConnInfoMap,
		m.FilterMntnsMap,
		m.FilterNetnsMap,
		m.FilterPidMap,
		m.FilterPidnsMap,
		m.Rb,
		m.SslDataMap,
		m.SslRb,
		m.SslUserSpaceCallMap,
		m.SyscallDataMap,
		m.SyscallRb,
	)
}

// Openssl111aPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to LoadOpenssl111aObjects or ebpf.CollectionSpec.LoadAndAssign.
type Openssl111aPrograms struct {
	SSL_readEntryNestedSyscall    *ebpf.Program `ebpf:"SSL_read_entry_nested_syscall"`
	SSL_readEntryOffset           *ebpf.Program `ebpf:"SSL_read_entry_offset"`
	SSL_readExEntryNestedSyscall  *ebpf.Program `ebpf:"SSL_read_ex_entry_nested_syscall"`
	SSL_readExRetNestedSyscall    *ebpf.Program `ebpf:"SSL_read_ex_ret_nested_syscall"`
	SSL_readRetNestedSyscall      *ebpf.Program `ebpf:"SSL_read_ret_nested_syscall"`
	SSL_readRetOffset             *ebpf.Program `ebpf:"SSL_read_ret_offset"`
	SSL_writeEntryNestedSyscall   *ebpf.Program `ebpf:"SSL_write_entry_nested_syscall"`
	SSL_writeEntryOffset          *ebpf.Program `ebpf:"SSL_write_entry_offset"`
	SSL_writeExEntryNestedSyscall *ebpf.Program `ebpf:"SSL_write_ex_entry_nested_syscall"`
	SSL_writeExRetNestedSyscall   *ebpf.Program `ebpf:"SSL_write_ex_ret_nested_syscall"`
	SSL_writeRetNestedSyscall     *ebpf.Program `ebpf:"SSL_write_ret_nested_syscall"`
	SSL_writeRetOffset            *ebpf.Program `ebpf:"SSL_write_ret_offset"`
}

func (p *Openssl111aPrograms) Close() error {
	return _Openssl111aClose(
		p.SSL_readEntryNestedSyscall,
		p.SSL_readEntryOffset,
		p.SSL_readExEntryNestedSyscall,
		p.SSL_readExRetNestedSyscall,
		p.SSL_readRetNestedSyscall,
		p.SSL_readRetOffset,
		p.SSL_writeEntryNestedSyscall,
		p.SSL_writeEntryOffset,
		p.SSL_writeExEntryNestedSyscall,
		p.SSL_writeExRetNestedSyscall,
		p.SSL_writeRetNestedSyscall,
		p.SSL_writeRetOffset,
	)
}

func _Openssl111aClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed openssl111a_x86_bpfel.o
var _Openssl111aBytes []byte
