// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64

package bpf

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type Openssl111bConnEvtT struct {
	ConnInfo Openssl111bConnInfoT
	ConnType Openssl111bConnTypeT
	_        [4]byte
	Ts       uint64
}

type Openssl111bConnIdS_t struct {
	TgidFd  uint64
	NoTrace bool
	_       [7]byte
}

type Openssl111bConnInfoT struct {
	ConnId struct {
		Upid struct {
			Pid            uint32
			_              [4]byte
			StartTimeTicks uint64
		}
		Fd   int32
		_    [4]byte
		Tsid uint64
	}
	ReadBytes     uint64
	WriteBytes    uint64
	SslReadBytes  uint64
	SslWriteBytes uint64
	Laddr         struct {
		In6 struct {
			Sin6Family   uint16
			Sin6Port     uint16
			Sin6Flowinfo uint32
			Sin6Addr     struct{ In6U struct{ U6Addr8 [16]uint8 } }
			Sin6ScopeId  uint32
		}
	}
	Raddr struct {
		In6 struct {
			Sin6Family   uint16
			Sin6Port     uint16
			Sin6Flowinfo uint32
			Sin6Addr     struct{ In6U struct{ U6Addr8 [16]uint8 } }
			Sin6ScopeId  uint32
		}
	}
	Protocol            Openssl111bTrafficProtocolT
	Role                Openssl111bEndpointRoleT
	PrevCount           uint64
	PrevBuf             [4]int8
	PrependLengthHeader bool
	NoTrace             bool
	Ssl                 bool
	_                   [1]byte
}

type Openssl111bConnTypeT uint32

const (
	Openssl111bConnTypeTKConnect       Openssl111bConnTypeT = 0
	Openssl111bConnTypeTKClose         Openssl111bConnTypeT = 1
	Openssl111bConnTypeTKProtocolInfer Openssl111bConnTypeT = 2
)

type Openssl111bControlValueIndexT uint32

const (
	Openssl111bControlValueIndexTKTargetTGIDIndex   Openssl111bControlValueIndexT = 0
	Openssl111bControlValueIndexTKStirlingTGIDIndex Openssl111bControlValueIndexT = 1
	Openssl111bControlValueIndexTKEnabledXdpIndex   Openssl111bControlValueIndexT = 2
	Openssl111bControlValueIndexTKNumControlValues  Openssl111bControlValueIndexT = 3
)

type Openssl111bEndpointRoleT uint32

const (
	Openssl111bEndpointRoleTKRoleClient  Openssl111bEndpointRoleT = 1
	Openssl111bEndpointRoleTKRoleServer  Openssl111bEndpointRoleT = 2
	Openssl111bEndpointRoleTKRoleUnknown Openssl111bEndpointRoleT = 4
)

type Openssl111bKernEvt struct {
	FuncName [16]int8
	Ts       uint64
	Seq      uint64
	Len      uint32
	Flags    uint8
	_        [3]byte
	ConnIdS  Openssl111bConnIdS_t
	IsSample int32
	Step     Openssl111bStepT
}

type Openssl111bKernEvtData struct {
	Ke      Openssl111bKernEvt
	BufSize uint32
	Msg     [30720]int8
	_       [4]byte
}

type Openssl111bSockKey struct {
	Sip   [2]uint64
	Dip   [2]uint64
	Sport uint16
	Dport uint16
	_     [4]byte
}

type Openssl111bStepT uint32

const (
	Openssl111bStepTStart       Openssl111bStepT = 0
	Openssl111bStepTSSL_OUT     Openssl111bStepT = 1
	Openssl111bStepTSYSCALL_OUT Openssl111bStepT = 2
	Openssl111bStepTTCP_OUT     Openssl111bStepT = 3
	Openssl111bStepTIP_OUT      Openssl111bStepT = 4
	Openssl111bStepTQDISC_OUT   Openssl111bStepT = 5
	Openssl111bStepTDEV_OUT     Openssl111bStepT = 6
	Openssl111bStepTNIC_OUT     Openssl111bStepT = 7
	Openssl111bStepTNIC_IN      Openssl111bStepT = 8
	Openssl111bStepTDEV_IN      Openssl111bStepT = 9
	Openssl111bStepTIP_IN       Openssl111bStepT = 10
	Openssl111bStepTTCP_IN      Openssl111bStepT = 11
	Openssl111bStepTUSER_COPY   Openssl111bStepT = 12
	Openssl111bStepTSYSCALL_IN  Openssl111bStepT = 13
	Openssl111bStepTSSL_IN      Openssl111bStepT = 14
	Openssl111bStepTEnd         Openssl111bStepT = 15
)

type Openssl111bTrafficDirectionT uint32

const (
	Openssl111bTrafficDirectionTKEgress  Openssl111bTrafficDirectionT = 0
	Openssl111bTrafficDirectionTKIngress Openssl111bTrafficDirectionT = 1
)

type Openssl111bTrafficProtocolT uint32

const (
	Openssl111bTrafficProtocolTKProtocolUnset   Openssl111bTrafficProtocolT = 0
	Openssl111bTrafficProtocolTKProtocolUnknown Openssl111bTrafficProtocolT = 1
	Openssl111bTrafficProtocolTKProtocolHTTP    Openssl111bTrafficProtocolT = 2
	Openssl111bTrafficProtocolTKProtocolHTTP2   Openssl111bTrafficProtocolT = 3
	Openssl111bTrafficProtocolTKProtocolMySQL   Openssl111bTrafficProtocolT = 4
	Openssl111bTrafficProtocolTKProtocolCQL     Openssl111bTrafficProtocolT = 5
	Openssl111bTrafficProtocolTKProtocolPGSQL   Openssl111bTrafficProtocolT = 6
	Openssl111bTrafficProtocolTKProtocolDNS     Openssl111bTrafficProtocolT = 7
	Openssl111bTrafficProtocolTKProtocolRedis   Openssl111bTrafficProtocolT = 8
	Openssl111bTrafficProtocolTKProtocolNATS    Openssl111bTrafficProtocolT = 9
	Openssl111bTrafficProtocolTKProtocolMongo   Openssl111bTrafficProtocolT = 10
	Openssl111bTrafficProtocolTKProtocolKafka   Openssl111bTrafficProtocolT = 11
	Openssl111bTrafficProtocolTKProtocolMux     Openssl111bTrafficProtocolT = 12
	Openssl111bTrafficProtocolTKProtocolAMQP    Openssl111bTrafficProtocolT = 13
	Openssl111bTrafficProtocolTKNumProtocols    Openssl111bTrafficProtocolT = 14
)

// LoadOpenssl111b returns the embedded CollectionSpec for Openssl111b.
func LoadOpenssl111b() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_Openssl111bBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load Openssl111b: %w", err)
	}

	return spec, err
}

// LoadOpenssl111bObjects loads Openssl111b and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*Openssl111bObjects
//	*Openssl111bPrograms
//	*Openssl111bMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func LoadOpenssl111bObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := LoadOpenssl111b()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// Openssl111bSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type Openssl111bSpecs struct {
	Openssl111bProgramSpecs
	Openssl111bMapSpecs
}

// Openssl111bSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type Openssl111bProgramSpecs struct {
	SSL_readEntryNestedSyscall    *ebpf.ProgramSpec `ebpf:"SSL_read_entry_nested_syscall"`
	SSL_readEntryOffset           *ebpf.ProgramSpec `ebpf:"SSL_read_entry_offset"`
	SSL_readExEntryNestedSyscall  *ebpf.ProgramSpec `ebpf:"SSL_read_ex_entry_nested_syscall"`
	SSL_readExRetNestedSyscall    *ebpf.ProgramSpec `ebpf:"SSL_read_ex_ret_nested_syscall"`
	SSL_readRetNestedSyscall      *ebpf.ProgramSpec `ebpf:"SSL_read_ret_nested_syscall"`
	SSL_readRetOffset             *ebpf.ProgramSpec `ebpf:"SSL_read_ret_offset"`
	SSL_writeEntryNestedSyscall   *ebpf.ProgramSpec `ebpf:"SSL_write_entry_nested_syscall"`
	SSL_writeEntryOffset          *ebpf.ProgramSpec `ebpf:"SSL_write_entry_offset"`
	SSL_writeExEntryNestedSyscall *ebpf.ProgramSpec `ebpf:"SSL_write_ex_entry_nested_syscall"`
	SSL_writeExRetNestedSyscall   *ebpf.ProgramSpec `ebpf:"SSL_write_ex_ret_nested_syscall"`
	SSL_writeRetNestedSyscall     *ebpf.ProgramSpec `ebpf:"SSL_write_ret_nested_syscall"`
	SSL_writeRetOffset            *ebpf.ProgramSpec `ebpf:"SSL_write_ret_offset"`
}

// Openssl111bMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type Openssl111bMapSpecs struct {
	ActiveSslReadArgsMap  *ebpf.MapSpec `ebpf:"active_ssl_read_args_map"`
	ActiveSslWriteArgsMap *ebpf.MapSpec `ebpf:"active_ssl_write_args_map"`
	ConnEvtRb             *ebpf.MapSpec `ebpf:"conn_evt_rb"`
	ConnInfoMap           *ebpf.MapSpec `ebpf:"conn_info_map"`
	Rb                    *ebpf.MapSpec `ebpf:"rb"`
	SslDataMap            *ebpf.MapSpec `ebpf:"ssl_data_map"`
	SslRb                 *ebpf.MapSpec `ebpf:"ssl_rb"`
	SslUserSpaceCallMap   *ebpf.MapSpec `ebpf:"ssl_user_space_call_map"`
	SyscallDataMap        *ebpf.MapSpec `ebpf:"syscall_data_map"`
	SyscallRb             *ebpf.MapSpec `ebpf:"syscall_rb"`
}

// Openssl111bObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to LoadOpenssl111bObjects or ebpf.CollectionSpec.LoadAndAssign.
type Openssl111bObjects struct {
	Openssl111bPrograms
	Openssl111bMaps
}

func (o *Openssl111bObjects) Close() error {
	return _Openssl111bClose(
		&o.Openssl111bPrograms,
		&o.Openssl111bMaps,
	)
}

// Openssl111bMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to LoadOpenssl111bObjects or ebpf.CollectionSpec.LoadAndAssign.
type Openssl111bMaps struct {
	ActiveSslReadArgsMap  *ebpf.Map `ebpf:"active_ssl_read_args_map"`
	ActiveSslWriteArgsMap *ebpf.Map `ebpf:"active_ssl_write_args_map"`
	ConnEvtRb             *ebpf.Map `ebpf:"conn_evt_rb"`
	ConnInfoMap           *ebpf.Map `ebpf:"conn_info_map"`
	Rb                    *ebpf.Map `ebpf:"rb"`
	SslDataMap            *ebpf.Map `ebpf:"ssl_data_map"`
	SslRb                 *ebpf.Map `ebpf:"ssl_rb"`
	SslUserSpaceCallMap   *ebpf.Map `ebpf:"ssl_user_space_call_map"`
	SyscallDataMap        *ebpf.Map `ebpf:"syscall_data_map"`
	SyscallRb             *ebpf.Map `ebpf:"syscall_rb"`
}

func (m *Openssl111bMaps) Close() error {
	return _Openssl111bClose(
		m.ActiveSslReadArgsMap,
		m.ActiveSslWriteArgsMap,
		m.ConnEvtRb,
		m.ConnInfoMap,
		m.Rb,
		m.SslDataMap,
		m.SslRb,
		m.SslUserSpaceCallMap,
		m.SyscallDataMap,
		m.SyscallRb,
	)
}

// Openssl111bPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to LoadOpenssl111bObjects or ebpf.CollectionSpec.LoadAndAssign.
type Openssl111bPrograms struct {
	SSL_readEntryNestedSyscall    *ebpf.Program `ebpf:"SSL_read_entry_nested_syscall"`
	SSL_readEntryOffset           *ebpf.Program `ebpf:"SSL_read_entry_offset"`
	SSL_readExEntryNestedSyscall  *ebpf.Program `ebpf:"SSL_read_ex_entry_nested_syscall"`
	SSL_readExRetNestedSyscall    *ebpf.Program `ebpf:"SSL_read_ex_ret_nested_syscall"`
	SSL_readRetNestedSyscall      *ebpf.Program `ebpf:"SSL_read_ret_nested_syscall"`
	SSL_readRetOffset             *ebpf.Program `ebpf:"SSL_read_ret_offset"`
	SSL_writeEntryNestedSyscall   *ebpf.Program `ebpf:"SSL_write_entry_nested_syscall"`
	SSL_writeEntryOffset          *ebpf.Program `ebpf:"SSL_write_entry_offset"`
	SSL_writeExEntryNestedSyscall *ebpf.Program `ebpf:"SSL_write_ex_entry_nested_syscall"`
	SSL_writeExRetNestedSyscall   *ebpf.Program `ebpf:"SSL_write_ex_ret_nested_syscall"`
	SSL_writeRetNestedSyscall     *ebpf.Program `ebpf:"SSL_write_ret_nested_syscall"`
	SSL_writeRetOffset            *ebpf.Program `ebpf:"SSL_write_ret_offset"`
}

func (p *Openssl111bPrograms) Close() error {
	return _Openssl111bClose(
		p.SSL_readEntryNestedSyscall,
		p.SSL_readEntryOffset,
		p.SSL_readExEntryNestedSyscall,
		p.SSL_readExRetNestedSyscall,
		p.SSL_readRetNestedSyscall,
		p.SSL_readRetOffset,
		p.SSL_writeEntryNestedSyscall,
		p.SSL_writeEntryOffset,
		p.SSL_writeExEntryNestedSyscall,
		p.SSL_writeExRetNestedSyscall,
		p.SSL_writeRetNestedSyscall,
		p.SSL_writeRetOffset,
	)
}

func _Openssl111bClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed openssl111b_x86_bpfel.o
var _Openssl111bBytes []byte
