// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64

package bpf

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type Openssl102aConnEvtT struct {
	ConnInfo Openssl102aConnInfoT
	ConnType Openssl102aConnTypeT
	_        [4]byte
	Ts       uint64
}

type Openssl102aConnIdS_t struct {
	TgidFd  uint64
	NoTrace bool
	_       [7]byte
}

type Openssl102aConnInfoT struct {
	ConnId struct {
		Upid struct {
			Pid            uint32
			_              [4]byte
			StartTimeTicks uint64
		}
		Fd   int32
		_    [4]byte
		Tsid uint64
	}
	ReadBytes     uint64
	WriteBytes    uint64
	SslReadBytes  uint64
	SslWriteBytes uint64
	Laddr         struct {
		In6 struct {
			Sin6Family   uint16
			Sin6Port     uint16
			Sin6Flowinfo uint32
			Sin6Addr     struct{ In6U struct{ U6Addr8 [16]uint8 } }
			Sin6ScopeId  uint32
		}
	}
	Raddr struct {
		In6 struct {
			Sin6Family   uint16
			Sin6Port     uint16
			Sin6Flowinfo uint32
			Sin6Addr     struct{ In6U struct{ U6Addr8 [16]uint8 } }
			Sin6ScopeId  uint32
		}
	}
	Protocol            Openssl102aTrafficProtocolT
	Role                Openssl102aEndpointRoleT
	PrevCount           uint64
	PrevBuf             [4]int8
	PrependLengthHeader bool
	NoTrace             bool
	Ssl                 bool
	_                   [1]byte
}

type Openssl102aConnTypeT uint32

const (
	Openssl102aConnTypeTKConnect       Openssl102aConnTypeT = 0
	Openssl102aConnTypeTKClose         Openssl102aConnTypeT = 1
	Openssl102aConnTypeTKProtocolInfer Openssl102aConnTypeT = 2
)

type Openssl102aControlValueIndexT uint32

const (
	Openssl102aControlValueIndexTKTargetTGIDIndex          Openssl102aControlValueIndexT = 0
	Openssl102aControlValueIndexTKStirlingTGIDIndex        Openssl102aControlValueIndexT = 1
	Openssl102aControlValueIndexTKEnabledXdpIndex          Openssl102aControlValueIndexT = 2
	Openssl102aControlValueIndexTKEnableFilterByPid        Openssl102aControlValueIndexT = 3
	Openssl102aControlValueIndexTKEnableFilterByLocalPort  Openssl102aControlValueIndexT = 4
	Openssl102aControlValueIndexTKEnableFilterByRemotePort Openssl102aControlValueIndexT = 5
	Openssl102aControlValueIndexTKEnableFilterByRemoteHost Openssl102aControlValueIndexT = 6
	Openssl102aControlValueIndexTKNumControlValues         Openssl102aControlValueIndexT = 7
)

type Openssl102aEndpointRoleT uint32

const (
	Openssl102aEndpointRoleTKRoleClient  Openssl102aEndpointRoleT = 1
	Openssl102aEndpointRoleTKRoleServer  Openssl102aEndpointRoleT = 2
	Openssl102aEndpointRoleTKRoleUnknown Openssl102aEndpointRoleT = 4
)

type Openssl102aKernEvt struct {
	FuncName [16]int8
	Ts       uint64
	Seq      uint64
	Len      uint32
	Flags    uint8
	_        [3]byte
	ConnIdS  Openssl102aConnIdS_t
	IsSample int32
	Step     Openssl102aStepT
}

type Openssl102aKernEvtData struct {
	Ke      Openssl102aKernEvt
	BufSize uint32
	Msg     [30720]int8
	_       [4]byte
}

type Openssl102aSockKey struct {
	Sip   [2]uint64
	Dip   [2]uint64
	Sport uint16
	Dport uint16
	_     [4]byte
}

type Openssl102aStepT uint32

const (
	Openssl102aStepTStart       Openssl102aStepT = 0
	Openssl102aStepTSSL_OUT     Openssl102aStepT = 1
	Openssl102aStepTSYSCALL_OUT Openssl102aStepT = 2
	Openssl102aStepTTCP_OUT     Openssl102aStepT = 3
	Openssl102aStepTIP_OUT      Openssl102aStepT = 4
	Openssl102aStepTQDISC_OUT   Openssl102aStepT = 5
	Openssl102aStepTDEV_OUT     Openssl102aStepT = 6
	Openssl102aStepTNIC_OUT     Openssl102aStepT = 7
	Openssl102aStepTNIC_IN      Openssl102aStepT = 8
	Openssl102aStepTDEV_IN      Openssl102aStepT = 9
	Openssl102aStepTIP_IN       Openssl102aStepT = 10
	Openssl102aStepTTCP_IN      Openssl102aStepT = 11
	Openssl102aStepTUSER_COPY   Openssl102aStepT = 12
	Openssl102aStepTSYSCALL_IN  Openssl102aStepT = 13
	Openssl102aStepTSSL_IN      Openssl102aStepT = 14
	Openssl102aStepTEnd         Openssl102aStepT = 15
)

type Openssl102aTrafficDirectionT uint32

const (
	Openssl102aTrafficDirectionTKEgress  Openssl102aTrafficDirectionT = 0
	Openssl102aTrafficDirectionTKIngress Openssl102aTrafficDirectionT = 1
)

type Openssl102aTrafficProtocolT uint32

const (
	Openssl102aTrafficProtocolTKProtocolUnset   Openssl102aTrafficProtocolT = 0
	Openssl102aTrafficProtocolTKProtocolUnknown Openssl102aTrafficProtocolT = 1
	Openssl102aTrafficProtocolTKProtocolHTTP    Openssl102aTrafficProtocolT = 2
	Openssl102aTrafficProtocolTKProtocolHTTP2   Openssl102aTrafficProtocolT = 3
	Openssl102aTrafficProtocolTKProtocolMySQL   Openssl102aTrafficProtocolT = 4
	Openssl102aTrafficProtocolTKProtocolCQL     Openssl102aTrafficProtocolT = 5
	Openssl102aTrafficProtocolTKProtocolPGSQL   Openssl102aTrafficProtocolT = 6
	Openssl102aTrafficProtocolTKProtocolDNS     Openssl102aTrafficProtocolT = 7
	Openssl102aTrafficProtocolTKProtocolRedis   Openssl102aTrafficProtocolT = 8
	Openssl102aTrafficProtocolTKProtocolNATS    Openssl102aTrafficProtocolT = 9
	Openssl102aTrafficProtocolTKProtocolMongo   Openssl102aTrafficProtocolT = 10
	Openssl102aTrafficProtocolTKProtocolKafka   Openssl102aTrafficProtocolT = 11
	Openssl102aTrafficProtocolTKProtocolMux     Openssl102aTrafficProtocolT = 12
	Openssl102aTrafficProtocolTKProtocolAMQP    Openssl102aTrafficProtocolT = 13
	Openssl102aTrafficProtocolTKNumProtocols    Openssl102aTrafficProtocolT = 14
)

// LoadOpenssl102a returns the embedded CollectionSpec for Openssl102a.
func LoadOpenssl102a() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_Openssl102aBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load Openssl102a: %w", err)
	}

	return spec, err
}

// LoadOpenssl102aObjects loads Openssl102a and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*Openssl102aObjects
//	*Openssl102aPrograms
//	*Openssl102aMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func LoadOpenssl102aObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := LoadOpenssl102a()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// Openssl102aSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type Openssl102aSpecs struct {
	Openssl102aProgramSpecs
	Openssl102aMapSpecs
}

// Openssl102aSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type Openssl102aProgramSpecs struct {
	SSL_readEntryNestedSyscall    *ebpf.ProgramSpec `ebpf:"SSL_read_entry_nested_syscall"`
	SSL_readEntryOffset           *ebpf.ProgramSpec `ebpf:"SSL_read_entry_offset"`
	SSL_readExEntryNestedSyscall  *ebpf.ProgramSpec `ebpf:"SSL_read_ex_entry_nested_syscall"`
	SSL_readExRetNestedSyscall    *ebpf.ProgramSpec `ebpf:"SSL_read_ex_ret_nested_syscall"`
	SSL_readRetNestedSyscall      *ebpf.ProgramSpec `ebpf:"SSL_read_ret_nested_syscall"`
	SSL_readRetOffset             *ebpf.ProgramSpec `ebpf:"SSL_read_ret_offset"`
	SSL_writeEntryNestedSyscall   *ebpf.ProgramSpec `ebpf:"SSL_write_entry_nested_syscall"`
	SSL_writeEntryOffset          *ebpf.ProgramSpec `ebpf:"SSL_write_entry_offset"`
	SSL_writeExEntryNestedSyscall *ebpf.ProgramSpec `ebpf:"SSL_write_ex_entry_nested_syscall"`
	SSL_writeExRetNestedSyscall   *ebpf.ProgramSpec `ebpf:"SSL_write_ex_ret_nested_syscall"`
	SSL_writeRetNestedSyscall     *ebpf.ProgramSpec `ebpf:"SSL_write_ret_nested_syscall"`
	SSL_writeRetOffset            *ebpf.ProgramSpec `ebpf:"SSL_write_ret_offset"`
}

// Openssl102aMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type Openssl102aMapSpecs struct {
	ActiveSslReadArgsMap  *ebpf.MapSpec `ebpf:"active_ssl_read_args_map"`
	ActiveSslWriteArgsMap *ebpf.MapSpec `ebpf:"active_ssl_write_args_map"`
	ConnEvtRb             *ebpf.MapSpec `ebpf:"conn_evt_rb"`
	ConnInfoMap           *ebpf.MapSpec `ebpf:"conn_info_map"`
	FilterMntnsMap        *ebpf.MapSpec `ebpf:"filter_mntns_map"`
	FilterNetnsMap        *ebpf.MapSpec `ebpf:"filter_netns_map"`
	FilterPidMap          *ebpf.MapSpec `ebpf:"filter_pid_map"`
	FilterPidnsMap        *ebpf.MapSpec `ebpf:"filter_pidns_map"`
	Rb                    *ebpf.MapSpec `ebpf:"rb"`
	SslDataMap            *ebpf.MapSpec `ebpf:"ssl_data_map"`
	SslRb                 *ebpf.MapSpec `ebpf:"ssl_rb"`
	SslUserSpaceCallMap   *ebpf.MapSpec `ebpf:"ssl_user_space_call_map"`
	SyscallDataMap        *ebpf.MapSpec `ebpf:"syscall_data_map"`
	SyscallRb             *ebpf.MapSpec `ebpf:"syscall_rb"`
}

// Openssl102aObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to LoadOpenssl102aObjects or ebpf.CollectionSpec.LoadAndAssign.
type Openssl102aObjects struct {
	Openssl102aPrograms
	Openssl102aMaps
}

func (o *Openssl102aObjects) Close() error {
	return _Openssl102aClose(
		&o.Openssl102aPrograms,
		&o.Openssl102aMaps,
	)
}

// Openssl102aMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to LoadOpenssl102aObjects or ebpf.CollectionSpec.LoadAndAssign.
type Openssl102aMaps struct {
	ActiveSslReadArgsMap  *ebpf.Map `ebpf:"active_ssl_read_args_map"`
	ActiveSslWriteArgsMap *ebpf.Map `ebpf:"active_ssl_write_args_map"`
	ConnEvtRb             *ebpf.Map `ebpf:"conn_evt_rb"`
	ConnInfoMap           *ebpf.Map `ebpf:"conn_info_map"`
	FilterMntnsMap        *ebpf.Map `ebpf:"filter_mntns_map"`
	FilterNetnsMap        *ebpf.Map `ebpf:"filter_netns_map"`
	FilterPidMap          *ebpf.Map `ebpf:"filter_pid_map"`
	FilterPidnsMap        *ebpf.Map `ebpf:"filter_pidns_map"`
	Rb                    *ebpf.Map `ebpf:"rb"`
	SslDataMap            *ebpf.Map `ebpf:"ssl_data_map"`
	SslRb                 *ebpf.Map `ebpf:"ssl_rb"`
	SslUserSpaceCallMap   *ebpf.Map `ebpf:"ssl_user_space_call_map"`
	SyscallDataMap        *ebpf.Map `ebpf:"syscall_data_map"`
	SyscallRb             *ebpf.Map `ebpf:"syscall_rb"`
}

func (m *Openssl102aMaps) Close() error {
	return _Openssl102aClose(
		m.ActiveSslReadArgsMap,
		m.ActiveSslWriteArgsMap,
		m.ConnEvtRb,
		m.ConnInfoMap,
		m.FilterMntnsMap,
		m.FilterNetnsMap,
		m.FilterPidMap,
		m.FilterPidnsMap,
		m.Rb,
		m.SslDataMap,
		m.SslRb,
		m.SslUserSpaceCallMap,
		m.SyscallDataMap,
		m.SyscallRb,
	)
}

// Openssl102aPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to LoadOpenssl102aObjects or ebpf.CollectionSpec.LoadAndAssign.
type Openssl102aPrograms struct {
	SSL_readEntryNestedSyscall    *ebpf.Program `ebpf:"SSL_read_entry_nested_syscall"`
	SSL_readEntryOffset           *ebpf.Program `ebpf:"SSL_read_entry_offset"`
	SSL_readExEntryNestedSyscall  *ebpf.Program `ebpf:"SSL_read_ex_entry_nested_syscall"`
	SSL_readExRetNestedSyscall    *ebpf.Program `ebpf:"SSL_read_ex_ret_nested_syscall"`
	SSL_readRetNestedSyscall      *ebpf.Program `ebpf:"SSL_read_ret_nested_syscall"`
	SSL_readRetOffset             *ebpf.Program `ebpf:"SSL_read_ret_offset"`
	SSL_writeEntryNestedSyscall   *ebpf.Program `ebpf:"SSL_write_entry_nested_syscall"`
	SSL_writeEntryOffset          *ebpf.Program `ebpf:"SSL_write_entry_offset"`
	SSL_writeExEntryNestedSyscall *ebpf.Program `ebpf:"SSL_write_ex_entry_nested_syscall"`
	SSL_writeExRetNestedSyscall   *ebpf.Program `ebpf:"SSL_write_ex_ret_nested_syscall"`
	SSL_writeRetNestedSyscall     *ebpf.Program `ebpf:"SSL_write_ret_nested_syscall"`
	SSL_writeRetOffset            *ebpf.Program `ebpf:"SSL_write_ret_offset"`
}

func (p *Openssl102aPrograms) Close() error {
	return _Openssl102aClose(
		p.SSL_readEntryNestedSyscall,
		p.SSL_readEntryOffset,
		p.SSL_readExEntryNestedSyscall,
		p.SSL_readExRetNestedSyscall,
		p.SSL_readRetNestedSyscall,
		p.SSL_readRetOffset,
		p.SSL_writeEntryNestedSyscall,
		p.SSL_writeEntryOffset,
		p.SSL_writeExEntryNestedSyscall,
		p.SSL_writeExRetNestedSyscall,
		p.SSL_writeRetNestedSyscall,
		p.SSL_writeRetOffset,
	)
}

func _Openssl102aClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed openssl102a_x86_bpfel.o
var _Openssl102aBytes []byte
